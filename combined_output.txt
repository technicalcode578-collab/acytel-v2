// File: src/features/player/model/player.store.ts
import { createSignal, createEffect, createRoot } from "solid-js";
import { Track } from "../../../entities/track/model/track.model";
import * as AudioService from "../../../shared/lib/audio.service";
import * as CacheService from "../../../shared/lib/cache.service";
import { getSecureTrackUrl } from "../../../entities/track/api/track.api"; 

const [currentTrack, setCurrentTrack] = createSignal<Track | null>(null);
const [isPlaying, setIsPlaying] = createSignal(false);
const [isLoading, setIsLoading] = createSignal(false);
const [currentTime, setCurrentTime] = createSignal(0);
const [duration, setDuration] = createSignal(0);
const [isSeekable, setIsSeekable] = createSignal(false);

createRoot(() => {
    createEffect(() => {
        let progressInterval: number;
        if (isPlaying()) {
            progressInterval = window.setInterval(() => {
                const time = AudioService.getCurrentTime();
                if (duration() > 0 && time <= duration()) {
                    setCurrentTime(time);
                }
                if (time >= duration() && duration() > 0) {
                    setIsPlaying(false);
                }
            }, 250);
        }
        return () => clearInterval(progressInterval);
    });
});

export const playerActions = {
    playTrack: async (track: Track) => {
        if (currentTrack()?.id === track.id) {
            playerActions.togglePlayPause();
            return;
        }

        setIsLoading(true);
        setIsSeekable(false);
        setCurrentTrack(track);
        AudioService.stop();

        try {
            let audioData = await CacheService.getTrack(track.id);

            if (!audioData) {
                const secureUrl = await getSecureTrackUrl(track.id);
                const response = await fetch(secureUrl);
                if (!response.ok) throw new Error(`Network Error: ${response.statusText}`);
                audioData = await response.arrayBuffer();
                CacheService.storeTrack(track.id, audioData.slice(0));
            }

            if (audioData) {
                const trackDuration = await AudioService.playFromBuffer(new Uint8Array(audioData));
                setDuration(trackDuration);
                setIsPlaying(true);
                setIsSeekable(true);
            }

        } catch (error) {
            console.error("Error playing track:", error);
            setIsPlaying(false);
        } finally {
            setIsLoading(false);
        }
    },

    togglePlayPause: () => {
        if (!currentTrack()) return;
        if (isPlaying()) {
            AudioService.pause();
            setIsPlaying(false);
        } else {
            AudioService.resume();
            setIsPlaying(true);
        }
    },

    seek: (time: number) => {
        if (isSeekable()) {
            AudioService.seek(time);
            setCurrentTime(time);
        }
    },
};

export const playerState = { currentTrack, isPlaying, isLoading, currentTime, duration, isSeekable };import { Component } from 'solid-js';

// --- SVG Icon Components for the Player ---

const IconPlayerPrevious = () => (
  <svg width="24" height="24" viewBox="0 0 24 24" fill="white" xmlns="http://www.w3.org/2000/svg">
    <path d="M18 17L11 12.5V17H9V7H11V11.5L18 7V17Z"/>
  </svg>
);

const IconPlayerPause = () => (
  <svg width="24" height="24" viewBox="0 0 24 24" fill="white" xmlns="http://www.w3.org/2000/svg">
    <path d="M9 7H11V17H9V7ZM13 7H15V17H13V7Z"/>
  </svg>
);

const IconPlayerNext = () => (
  <svg width="24" height="24" viewBox="0 0 24 24" fill="white" xmlns="http://www.w3.org/2000/svg">
    <path d="M6 7L13 11.5V7H15V17H13V12.5L6 17V7Z"/>
  </svg>
);

const IconStylizedMusicNote = () => (
    <svg width="32" height="32" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg">
        <path d="M24.0002 42.0001V12.0001L42.0002 6.00009V36.0001" stroke="#A0AEC0" stroke-width="3" stroke-linecap="round" stroke-linejoin="round"/>
        <path d="M18.0002 36.0001C21.3139 36.0001 24.0002 33.3138 24.0002 30.0001C24.0002 26.6864 21.3139 24.0001 18.0002 24.0001C14.6865 24.0001 12.0002 26.6864 12.0002 30.0001C12.0002 33.3138 14.6865 36.0001 18.0002 36.0001Z" fill="#1A1C25" stroke="#A0AEC0" stroke-width="3" stroke-linejoin="round"/>
        <path d="M36.0002 30.0001C39.3139 30.0001 42.0002 27.3138 42.0002 24.0001C42.0002 20.6864 39.3139 18.0001 36.0002 18.0001C32.6865 18.0001 30.0002 20.6864 30.0002 24.0001C30.0002 27.3138 32.6865 30.0001 36.0002 30.0001Z" fill="#1A1C25" stroke="#A0AEC0" stroke-width="3" stroke-linejoin="round"/>
    </svg>
);

// --- Main Exported Component ---

export const NowPlaying: Component = () => {
  return (
    <div class="bg-surface rounded-lg p-3 flex flex-col gap-3">
      <div class="flex items-center gap-3">
        <div class="w-14 h-14 bg-background/50 backdrop-blur-sm rounded-md flex items-center justify-center flex-shrink-0">
          <IconStylizedMusicNote />
        </div>
        <div class="flex-grow">
          <p class="font-bold text-primary-text">Khariyat</p>
          <p class="text-sm text-secondary-text -mt-1">Rio y entvro</p>
        </div>
      </div>
      <div class="flex items-center justify-center gap-6">
        <button class="text-primary-text transition-opacity hover:opacity-75"><IconPlayerPrevious /></button>
        <button class="text-primary-text transition-opacity hover:opacity-75"><IconPlayerPause /></button>
        <button class="text-primary-text transition-opacity hover:opacity-75"><IconPlayerNext /></button>
      </div>
    </div>
  );
};// File: src/widgets/player/MobilePlayer.tsx
import { Component, createSignal } from 'solid-js';

export const MobilePlayer: Component = () => {
  const [isExpanded, setIsExpanded] = createSignal(false);

  return (
    <div 
      class={`bg-surface/95 backdrop-blur-lg border-t border-surface/50 transition-all duration-300 ${
        isExpanded() ? 'h-64' : 'h-16'
      }`}
    >
      <div 
        class="flex items-center px-4 h-16 cursor-pointer"
        onClick={() => setIsExpanded(!isExpanded())}
      >
        {/* Album Art */}
        <div class="w-10 h-10 bg-background/50 rounded-md flex-shrink-0 mr-3">
          <img 
            src="https://i.pravatar.cc/40?img=10" 
            alt="Now Playing" 
            class="w-full h-full rounded-md object-cover"
          />
        </div>

        {/* Track Info */}
        <div class="flex-grow min-w-0 mr-3">
          <p class="text-sm font-semibold text-primary-text truncate">Khariyat</p>
          <p class="text-xs text-secondary-text truncate">Rio y entvro</p>
        </div>

        {/* Play/Pause Button */}
        <button class="p-2 hover:bg-surface/50 rounded-full transition-colors mr-2">
          <svg width="20" height="20" viewBox="0 0 24 24" fill="white">
            <path d="M9 7H11V17H9V7ZM13 7H15V17H13V7Z"/>
          </svg>
        </button>

        {/* Expand/Collapse */}
        <button class="p-1">
          <svg 
            width="16" 
            height="16" 
            viewBox="0 0 24 24" 
            fill="none"
            class={`transition-transform duration-300 ${isExpanded() ? 'rotate-180' : ''}`}
          >
            <path d="M7 10L12 15L17 10" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
          </svg>
        </button>
      </div>

      {/* Expanded View */}
      {isExpanded() && (
        <div class="px-4 pb-4">
          {/* Progress Bar */}
          <div class="mt-4">
            <div class="flex items-center justify-between text-xs text-muted mb-2">
              <span>1:23</span>
              <span>3:45</span>
            </div>
            <div class="h-1 bg-surface rounded-full overflow-hidden">
              <div class="h-full w-1/3 bg-accent rounded-full"></div>
            </div>
          </div>

          {/* Expanded Controls */}
          <div class="flex items-center justify-center gap-8 mt-6">
            <button class="p-2 hover:scale-110 transition-transform">
              <svg width="24" height="24" viewBox="0 0 24 24" fill="white">
                <path d="M18 17L11 12.5V17H9V7H11V11.5L18 7V17Z"/>
              </svg>
            </button>
            <button class="p-3 bg-white/10 rounded-full hover:bg-white/20 transition-colors">
              <svg width="28" height="28" viewBox="0 0 24 24" fill="white">
                <path d="M9 7H11V17H9V7ZM13 7H15V17H13V7Z"/>
              </svg>
            </button>
            <button class="p-2 hover:scale-110 transition-transform">
              <svg width="24" height="24" viewBox="0 0 24 24" fill="white">
                <path d="M6 7L13 11.5V7H15V17H13V12.5L6 17V7Z"/>
              </svg>
            </button>
          </div>
        </div>
      )}
    </div>
  );
};// File: src/entities/track/model/track.store.ts
import { createStore } from "solid-js/store";
import { Track } from "./track.model"; // CORRECTED PATH

const [tracks, setTracks] = createStore<Track[]>([]);

export const libraryStore = {
  tracks,
  setTracks: (newTracks: Track[]) => setTracks(newTracks),
  addTrack: (track: Track) => setTracks(t => [...t, track]),
};// File: src/features/library/api/track.service.ts
import api from '../../../shared/api';
import { Track } from '../../../shared/lib/track.model';

export async function getTracks(): Promise<Track[]> {
    const response = await api.get('/tracks');
    return response.data;
}

export async function uploadTrack(file: File): Promise<Track> {
    const formData = new FormData();
    formData.append('audioFile', file);
    const response = await api.post('/tracks/upload', formData, {
        headers: {
            'Content-Type': 'multipart/form-data',
        },
    });
    return response.data;
}

export async function getSecureTrackUrl(trackId: string): Promise<string> {
    const response = await api.get(`/tracks/${trackId}/secure-link`);
    return response.data.url;
}

export async function searchTracks(query: string): Promise<Track[]> {
    const response = await api.get('/tracks/search', { params: { q: query } });
    return response.data.hits || [];
}

export async function fetchTrackAsStream(trackId: string): Promise<ReadableStream<Uint8Array>> {
    const secureUrl = await getSecureTrackUrl(trackId);
    const response = await fetch(secureUrl);
    if (!response.ok || !response.body) {
        throw new Error(`Failed to fetch audio stream: ${response.statusText}`);
    }
    return response.body;
}// File: src/features/library/ui/TrackList.tsx
import { Component, For, Show, createSignal } from "solid-js";
import { Motion } from "solid-motion";
import { staggerContainer, staggerItem } from "../../../shared/lib/motion"; // CORRECTED
import { libraryStore } from "../../../entities/track/model/track.store"; // CORRECTED
import { playerActions } from "../../player/model/player.store";
import { Track } from "../../../entities/track/model/track.model";
import { AddToPlaylistModal } from "../../playlist/ui/AddToPlaylistModal";

export const TrackList: Component = () => {
    const [isModalOpen, setIsModalOpen] = createSignal(false);
    const [selectedTrack, setSelectedTrack] = createSignal<Track | null>(null);

    const handlePlay = (track: Track) => {
        playerActions.playTrack(track);
    };

    const openAddToPlaylistModal = (track: Track) => {
        setSelectedTrack(track);
        setIsModalOpen(true);
    };

    const closeAddToPlaylistModal = () => {
        setIsModalOpen(false);
        setSelectedTrack(null);
    };

    return (
        <div>
            <h2 class="text-2xl font-bold mb-4">Your Library</h2>
            <Show when={libraryStore.tracks.length > 0} fallback={<p class="text-gray-400">Your library is empty. Upload a track to get started.</p>}>
                <Motion
                    component="ul"
                    class="space-y-3"
                    initial={staggerContainer.hidden}
                    animate={staggerContainer.visible}
                    transition={staggerContainer.visible.transition}
                >
                    <For each={libraryStore.tracks}>
                        {(track) => (
                            <Motion
                                component="li"
                                class="bg-gray-800 p-4 rounded-lg flex justify-between items-center border border-gray-700 cursor-pointer"
                                initial={staggerItem.hidden}
                                animate={staggerItem.visible}
                                exit={staggerItem.hidden}
                                whileHover={{ scale: 1.02, backgroundColor: "#2D3748" }}
                                whileTap={{ scale: 0.98 }}
                            >
                                <div class="flex-grow" onClick={() => handlePlay(track)}>
                                    <p class="font-semibold text-white">{track.title}</p>
                                    <p class="text-sm text-gray-400">{track.artist}</p>
                                </div>
                                <div class="flex items-center space-x-4 flex-shrink-0">
                                    <span class="text-sm text-gray-500 hidden sm:block">
                                        {Math.floor(track.durationInSeconds / 60)}:{String(track.durationInSeconds % 60).padStart(2, '0')}
                                    </span>
                                    <button
                                        onClick={(e) => { e.stopPropagation(); openAddToPlaylistModal(track); }}
                                        class="px-3 py-1 text-sm bg-green-600 hover:bg-green-700 rounded-full z-10"
                                    >
                                        Add
                                    </button>
                                </div>
                            </Motion>
                        )}
                    </For>
                </Motion>
            </Show>
            <AddToPlaylistModal isOpen={isModalOpen()} track={selectedTrack()} onClose={closeAddToPlaylistModal} />
        </div>
    );
};// File: src/features/library/ui/UploadForm.tsx
import { createSignal, Component } from "solid-js";
import { uploadTrack } from "../../../entities/track/api/track.api"; // CORRECTED
import { libraryStore } from "../../../entities/track/model/track.store"; // CORRECTED

export const UploadForm: Component = () => {
    const [selectedFile, setSelectedFile] = createSignal<File | null>(null);
    const [loading, setLoading] = createSignal(false);
    const [error, setError] = createSignal("");

    const handleFileChange = (e: Event) => {
        const target = e.currentTarget as HTMLInputElement;
        if (target.files && target.files[0]) {
            setSelectedFile(target.files[0]);
        }
    };

    const handleSubmit = async (e: Event) => {
        e.preventDefault();
        if (!selectedFile()) return;
        setLoading(true);
        setError("");
        try {
            const newTrack = await uploadTrack(selectedFile()!);
            libraryStore.addTrack(newTrack);
            setSelectedFile(null); // Clear the input
            // Reset the file input visually
            const fileInput = document.querySelector('input[type="file"]') as HTMLInputElement;
            if (fileInput) fileInput.value = "";
        } catch (err) {
            setError("Upload failed. Please try again.");
        } finally {
            setLoading(false);
        }
    };

    return (
        <form onSubmit={handleSubmit} class="mb-8 p-4 bg-gray-800 border border-gray-700 rounded-lg">
            <h3 class="text-lg font-semibold mb-2">Upload New Track</h3>
            <div class="flex items-center space-x-4">
                <input type="file" accept="audio/*" onChange={handleFileChange} class="flex-grow text-sm text-gray-400 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-600 file:text-white hover:file:bg-blue-700"/>
                <button type="submit" disabled={!selectedFile() || loading()} class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 disabled:bg-gray-500 disabled:cursor-not-allowed">
                    {loading() ? "Uploading..." : "Upload"}
                </button>
            </div>
            {error() && <p class="mt-2 text-sm text-red-400">{error()}</p>}
        </form>
    );
};// File: src/core/audio.service.ts
import { getWasmModule } from './wasm-loader';

interface DecodedAudio {
    sample_rate: number;
    pcm_data: Float32Array;
}

let audioContext: AudioContext | null = null;
let sourceNode: AudioBufferSourceNode | null = null;
let currentBuffer: AudioBuffer | null = null;
let isPaused = false;
let contextStartTime = 0;
let bufferOffset = 0;

export const initAudioContext = async (sampleRate?: number) => {
    if (audioContext && audioContext.sampleRate === sampleRate) return;
    if (audioContext && audioContext.state !== 'closed') {
        await audioContext.close();
    }
    audioContext = new AudioContext({ sampleRate });
};

export const playFromBuffer = async (audioData: Uint8Array): Promise<number> => {
    const wasm = getWasmModule();
    const decodedResult = wasm.decode(audioData) as DecodedAudio;
    const sampleRate = decodedResult.sample_rate;
    const pcmData = decodedResult.pcm_data;

    await initAudioContext(sampleRate);
    stop();

    const audioBuffer = audioContext!.createBuffer(1, pcmData.length, audioContext!.sampleRate);
    audioBuffer.getChannelData(0).set(pcmData);
    currentBuffer = audioBuffer;

    return startPlayback(0);
};

const startPlayback = (offset: number): number => {
    if (!currentBuffer) return 0;
    sourceNode = audioContext!.createBufferSource();
    sourceNode.buffer = currentBuffer;
    sourceNode.connect(audioContext!.destination);
    sourceNode.start(0, offset);
    bufferOffset = offset;
    contextStartTime = audioContext!.currentTime;
    isPaused = false;
    return currentBuffer.duration;
}

export const stop = () => {
    if (sourceNode) {
        sourceNode.stop();
        sourceNode.disconnect();
        sourceNode = null;
    }
    isPaused = false;
    bufferOffset = 0;
    contextStartTime = 0;
    currentBuffer = null;
};

export const pause = () => {
    if (isPaused || !sourceNode) return;
    bufferOffset = bufferOffset + (audioContext!.currentTime - contextStartTime);
    sourceNode.stop();
    isPaused = true;
};

export const resume = () => {
    if (!isPaused || !currentBuffer) return;
    startPlayback(bufferOffset);
};

export const seek = (time: number) => {
    if (currentBuffer) {
        if (sourceNode) {
            sourceNode.stop();
        }
        startPlayback(time);
        if (isPaused) {
            audioContext?.resume().then(() => audioContext?.suspend());
        }
    }
};

export const getCurrentTime = (): number => {
    if (!audioContext || !currentBuffer) return 0;
    if (isPaused) {
        return bufferOffset;
    }
    const time = bufferOffset + (audioContext.currentTime - contextStartTime);
    return Math.min(time, currentBuffer.duration);
};import init, * as wasm from "../../audio-engine/pkg/audio_engine.js";

let wasmModule: typeof wasm | null = null;
let initPromise: Promise<void> | null = null;

export const initializeWasm = (): Promise<void> => {
  if (!initPromise) {
    console.log("[WASM Loader] Initializing WebAssembly module...");
    initPromise = init().then(() => {
      // wasm-pack generates a weird structure, we can't use the passed module directly
      // Instead we rely on the star-import 'wasm' which is now populated.
      wasmModule = wasm;
      console.log("[WASM Loader] WebAssembly module initialized successfully.");
    }).catch(error => {
      console.error("[WASM Loader] Failed to initialize WASM module.", error);
      initPromise = null; 
      throw error;
    });
  }
  return initPromise;
};

export const getWasmModule = (): typeof wasm => {
  if (!wasmModule) {
    throw new Error("WASM module is not initialized. Call initializeWasm() at application startup.");
  }
  return wasmModule;
};// File: /workspaces/acytel-v2/frontend/acytel_frontend/src/pages/MainApplicationPage.tsx
import { JSX } from 'solid-js';
import Layout from '../shared/ui/Layout';

// This component now correctly accepts and renders children passed to it by the router.
const MainApplicationPage = (props: { children: JSX.Element }) => {
  return (
    <Layout>
      {props.children}
    </Layout>
  );
};

export default MainApplicationPage;